package com.example.demo.controllers;

import java.sql.Date;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.*;
import com.example.demo.data.BookingRepository;
import com.example.demo.data.Hotel;
import com.example.demo.data.HotelRepository;
import com.example.demo.data.Room;
import com.example.demo.data.Room.RoomId;
import com.example.demo.data.RoomRepository;
import com.example.demo.data.RoomTypeRepository;


@Controller // This means that this class is a Controller
@RequestMapping(path="/search") // This means URL's start with /search (after Application path)
public class SearchController {

  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private HotelRepository hotelRepository;
  
  @Autowired
  private RoomRepository roomRepository;
  
  @Autowired
  private BookingRepository bookingRepository;
  
  @Autowired
  private RoomTypeRepository roomTypeRepository;

  @GetMapping(path="/all")
  public @ResponseBody Iterable<Hotel> getAllUsers() {
    // This returns a JSON or XML with the users
    return hotelRepository.findAll();
  }

  @GetMapping(path="/countries")
  public @ResponseBody Iterable<String> getAllCountries() {
    // This returns a JSON or XML with the users
    return hotelRepository.findCountriesOnly();
  }

  @GetMapping(path="/cities")
  public @ResponseBody Iterable<String> getCities(@RequestParam(value = "country", required=false) String country) {

	if (country == null) {
		return hotelRepository.findCitiesOnly();
	} else {
		return hotelRepository.findCitiesByCountry(country);
	}
  }
  
  @GetMapping(path="/roomtypes")
  public @ResponseBody Iterable<String> getRoomTypes(@RequestParam(value = "country", required=false) String country,
		  @RequestParam(value = "city", required=false) String city) {
	  Set<Integer> h = hotelRepository.findHotelIdByCountryAndCity(country, city);
	  return roomTypeRepository.findRoomTypeByHotelId(h);
  }

  @GetMapping(path="/available")
  public @ResponseBody Iterable<Room> getAvailableRooms(@RequestParam(value = "city", required=false) String city,
		  @RequestParam(value = "country", required = false) String country, 
		  @RequestParam(value = "roomtype", required = false) String roomType,
		  @RequestParam(value = "capacity", required = false) String capacity,
		  @RequestParam(value = "from", required=false) String from,
		  @RequestParam(value = "to", required = false) String to) {
	  
		Set<Integer> h = hotelRepository.findHotelIdByCountryAndCity(country, city);
		Iterable<Room> room = new ArrayList<>();
		
		Integer cap = null;
		if (capacity != null) {
			cap = Integer.parseInt(capacity);
		}
		Iterable<RoomId> roomid = roomRepository.findRoomIdByRoomType(h, roomType, cap);
		
		if (!roomid.iterator().hasNext()) return room;
		
		if (from != null && to != null) {
			Date fromD = Date.valueOf(from);
			Date toD = Date.valueOf(to);
			room = bookingRepository.findAvailableRooms(fromD, toD, roomid);
		} else {
			room = roomRepository.findRoomsById(roomid);
		}
		return room;
	}
  
  @GetMapping(path="/test")
  public @ResponseBody Iterable<Room> getTest() {
	  return roomRepository.findAll();
  }

//@RequestMapping("/hotel/{id: [0-9]+}")
//public String welcome() {
//    return "bookingpage";
//}

@RequestMapping("/bookingform")
public String hotelbookingpage() {
    return "bookingform";
}

}






